<?xml version="1.0" ?>
<!DOCTYPE plugin PUBLIC "-//JPF//Java Plug-in Manifest 1.0" "http://jpf.sourceforge.net/plugin_1_0.dtd">
<plugin id="net.ikarus_systems.icarus.core" version="0.0.1"
	class="net.ikarus_systems.icarus.plugins.core.IcarusCorePlugin">
	
	<doc>
		<doc-text>
			Core of the entire Icarus-Platform and first plug-in
			to be activated by the launcher.
		</doc-text>
	</doc>
	
	<attributes>
		<attribute id="net.ikarus_systems.icarus.resources" value="net.ikarus_systems.icarus.plugins.core.resources.core" />
		<attribute id="net.ikarus_systems.icarus.icons" value="net/ikarus_systems/icarus/plugins/core/icons/" />
		<attribute id="net.ikarus_systems.icarus.preferences" value="net.ikarus_systems.icarus.plugins.core.IcarusCorePreferences" />
	</attributes>
	
	<!-- Extension-Points -->
			
	<extension-point id="Serializable" extension-multiplicity="one-per-plugin">
		<doc>
			<doc-text>
				Special entry point for early registration of classes that want to be
				used via the JAXB-framework. Classes listed within the parameters of this
				extension will be loaded as soon as the default core plug-in starts and 
				registered to the shared JAXBContext via the JAXBUtils.
			</doc-text>
		</doc>
		<parameter-def id="class" multiplicity="one-or-more">
			<doc>
				<doc-text>
					Fully qualified name of a class that is to be registered to the
					shared JAXBContext.
				</doc-text>
			</doc>
		</parameter-def>
		<parameter-def id="adapter" multiplicity="any">
			<doc>
				<doc-text>
					Fully qualified name of a class extending 
					javax.xml.bind.annotation.adapters.XmlAdapter
					that is to be registered as an adapter for the
					serializable classes mentioned in the sub parameters
				</doc-text>
			</doc>
			<parameter-def id="class" multiplicity="one-or-more">
				<doc>
					<doc-text>
						Fully qualified name of a non-serializable class that
						has to be wrapped by the aforementioned adapter.
					</doc-text>
				</doc>
			</parameter-def>
		</parameter-def>
	</extension-point>
			
	<extension-point id="Localizable" extension-multiplicity="none">
		<doc>
			<doc-text>
				Abstract root extension definition for localizable extensions
				that offer localized identifier and description.
			</doc-text>
		</doc>
		<parameter-def id="icon" multiplicity="none-or-one">
			<doc>
				<doc-text>
					Path to icon of size 16x16 up to 24x24px
					should be accessible using the plugin classloader
					for the given extension.
				</doc-text>
			</doc>
		</parameter-def>
		<parameter-def id="name" multiplicity="none-or-one">
			<doc>
				<doc-text>
					Key used to obtain a locale dependent name string from
					the resource defined in the 'resources' parameter.
				</doc-text>
			</doc>
		</parameter-def>
		<parameter-def id="description" multiplicity="none-or-one">
			<doc>
				<doc-text>
					Key used to obtain a locale dependent description text from
					the resource defined in the 'resources' parameter.
				</doc-text>
			</doc>
		</parameter-def>
		<parameter-def id="resources" multiplicity="none-or-one">
			<doc>
				<doc-text>
					Path to a collection of resource files that enable
					localization of the name and description paremeters.
					Should be accessible using the plugin classloader
					for the given extension.
				</doc-text>
			</doc>
		</parameter-def>
	</extension-point>
			
	<extension-point id="Preferences" extension-multiplicity="one-per-plugin">
		<doc>
			<doc-text>
				Enables all plug-ins to induce their own configuration entries
				in the global ConfigRegistry instance without having to actually
				load the entire lug-in.
			</doc-text>
		</doc>
		<parameter-def id="class">
			<doc>
				<doc-text>
					Fully qualified name of a class that performs the registration of
					preferences data with the ConfigRegistry. The only requirement
					for this class is to have a no-args constructor. 
				</doc-text>
			</doc>
		</parameter-def>
	</extension-point>
			
	<extension-point id="Perspective" parent-point-id="Localizable" 
			parent-plugin-id="net.ikarus_systems.icarus.core">
		<doc>
			<doc-text>
				Basic extension defining an abstract high-level
				tool that presents the user with a collection of 
				interface elements of graphical kind and most 
				likely defines its own extension-points for special 
				views and other specialized tools. Its main job
				is the management of a single root component
				containing various Views within a window and 
				the users interaction with it.
			</doc-text>
		</doc>
		<parameter-def id="class">
			<doc>
				<doc-text>
					The 'perspective' itself as a java class.
					Required to have no-args constructor and estend
					abstract net.ikarus_systems.icarus.plugins.core.Perspective class!
				</doc-text>
			</doc>
		</parameter-def>
		<parameter-def id="preview" multiplicity="none-or-one">
			<doc>
				<doc-text>
					Optional path to an image that shows a preview of this
					perspective. Will be used for "fullscreen" dialogs that allow
					the user to select a perspective.
				</doc-text>
			</doc>
		</parameter-def>
		<parameter-def id="category" multiplicity="none-or-one">
			<doc>
				<doc-text>
					The general category this perspective wants to be
					assigned to. Will be used to logically group
					perspectives when presenting them to the user in
					a dialog or menu.
				</doc-text>
			</doc>
		</parameter-def>
		<parameter-def id="capabilities" multiplicity="none-or-one" type="any">
			<doc>
				<doc-text>
					Container for an arbitrary collection of capabilities.
					Each capability is represented by a sub-parameter with the
					parameter's id holding the 'command' field and the parameter's
					value describing the content type associated with the capability
					or the empty string if it is a general content type independent
					capability ('value' is an optional parameter). 
				</doc-text>
			</doc>
		</parameter-def>
	</extension-point>
			
	<extension-point id="PerspectiveCategory" parent-point-id="Localizable" 
			parent-plugin-id="net.ikarus_systems.icarus.core">
		<doc>
			<doc-text>
				Defines an entry in the global list of perspective categories
				that allows grouping of perspectives. The id has to be unique,
				in case of duplicate ids the category that registered first wins
				and later registrations will be discarded!
			</doc-text>
		</doc>
		<parameter-def id="parent" multiplicity="none-or-one">
			<doc>
				<doc-text>
					Optional parent category
				</doc-text>
			</doc>
		</parameter-def>
	</extension-point>
			
	<extension-point id="View" parent-point-id="Localizable" 
			parent-plugin-id="net.ikarus_systems.icarus.core">
		<doc>
			<doc-text>
				Defines an higher level ui object that can be used in various
				perspectives such as a tabular representation of sentence data
				or a graph visualization. 
			</doc-text>
		</doc>
		<parameter-def id="class" multiplicity="one">
			<doc>
				<doc-text>
					The 'view' itself as a java class.
					Required to have no-args constructor and extend
					abstract net.ikarus_systems.icarus.plugins.core.View class!
				</doc-text>
			</doc>
		</parameter-def>
		<parameter-def id="category" multiplicity="any">
			<doc>
				<doc-text>
					The general category this view wants to be
					assigned to. Will be used to logically group
					views when presenting them to the user in
					a dialog or menu.
				</doc-text>
			</doc>
		</parameter-def>
		<parameter-def id="capabilities" multiplicity="none-or-one" type="any">
			<doc>
				<doc-text>
					Container for an arbitrary collection of capabilities.
					Each capability is represented by a sub-parameter with the
					parameter's id holding the 'command' field and the parameter's
					value describing the content type associated with the capability
					or the empty string if it is a general content type independent
					capability ('value' is an optional parameter). 
				</doc-text>
			</doc>
		</parameter-def>
		<parameter-def id="alignment" multiplicity="none-or-one" type="fixed"
				custom-data="top|left|right|bottom|center|north|south|east|west" default-value="center">
			<doc>
				<doc-text>
					Hint for enclosing perspective where to place this view object.
					Legal values are:
						north, south, west, east, center, top, bottom, left, right
					If multiple views within a single perspective happen to be assigned
					the same alignment then they will be placed within a tabbed pane
					that is placed at the designated alignment area.
				</doc-text>
			</doc>
		</parameter-def>
		<parameter-def id="priority" multiplicity="none-or-one" type="fixed"
				custom-data="highest|high|standard|low|lowest|none|default" default-value="standard">
			<doc>
				<doc-text>
					Hint for enclosing perspective for ordering view objects that share
					a common alignment area. Usually the view with the highest priority
					will be made visible first as the selected view in the corresponding
					tabbed pane component. If several views declare the same priority then
					ordering is up to the enclsing perspecitve (normally done by sorting
					the ids in lexical order).
				</doc-text>
			</doc>
		</parameter-def>
		<parameter-def id="requiresTab" multiplicity="none-or-one" default-value="true" type="boolean">
			<doc>
				<doc-text>
					Allows the enclosing perspective to skip the space overhead of using
					a JtabbedPane to arrange views that share a common display area. If 
					there is only one single View extension defined for a display area and
					that view has its 'requiresTab' parameter set to 'false' then the
					container component created for this view will serve as the root of the
					display area instead of a tabbed pane. This is particularly useful
					when a view plans to arrange its internal components in a tabbed way
					and is likely to occupy a display area all alone.
				</doc-text>
			</doc>
		</parameter-def>
		<parameter-def id="activateEarly" multiplicity="none-or-one" default-value="false" type="boolean">
			<doc>
				<doc-text>
					Hint for enclosing perspectives on when to activate this view.
					Per default a view will be activated when its container component
					is made visible for the first time. By setting this parameter to
					'true' a view can request being loaded as soon as possible (the
					exact activation time still depends on the perspective hosting this view).
					This is essential for views that do listen to events dispatched by other
					views via broadcasts (while not activated a view cannot register such listeners).
				</doc-text>
			</doc>
		</parameter-def>
	</extension-point>
			
	<extension-point id="ManagementView" parent-point-id="View" 
			parent-plugin-id="net.ikarus_systems.icarus.core">
		<doc>
			<doc-text>
				Special entry point for 'View' extensions that only want to
				contribute management capabilities and are not to be used in
				perspectives other than the 'ManagementPerspective'.
			</doc-text>
		</doc>
	</extension-point>
			
	<extension-point id="UtilityView" parent-point-id="View" 
			parent-plugin-id="net.ikarus_systems.icarus.core">
		<doc>
			<doc-text>
				Utility-views are general-purpose implementations that provide
				tools or presentation capabilities that are used across a variety
				of perspectives and therefore are not associated with a certain type
				of perspective.
			</doc-text>
		</doc>
	</extension-point>
			
	<extension-point id="ViewCategory" parent-point-id="Localizable" 
			parent-plugin-id="net.ikarus_systems.icarus.core">
		<doc>
			<doc-text>
				Defines an entry in the global list of view categories
				that allows grouping of views. The id has to be unique,
				in case of duplicate ids the category that registered first wins
				and later registrations will be discarded!
			</doc-text>
		</doc>
		<parameter-def id="parent" multiplicity="none-or-one">
			<doc>
				<doc-text>
					Optional parent category
				</doc-text>
			</doc>
		</parameter-def>
	</extension-point>
			
	<extension-point id="UITheme" parent-point-id="Localizable" 
			parent-plugin-id="net.ikarus_systems.icarus.core">
		<doc>
			<doc-text>
				Allows plug-ins to provide new Look-and-Feel implementations for
				the user to choose.
			</doc-text>
		</doc>
		<parameter-def id="class">
			<doc>
				<doc-text>
					Classname of the Look-and-Feel implementation
				</doc-text>
			</doc>
		</parameter-def>
	</extension-point>
			
	<extension-point id="Action" extension-multiplicity="none">
		<doc>
			<doc-text>
				Abstract entry point to define an action that be bound to 
				a certain object and be configured directly within the declaring
				extension section. Extension points that extend this definition
				might provide more specific parameters that have to be present.
			</doc-text>
		</doc>
		<parameter-def id="class">
			<doc>
				<doc-text>
					The 'action' itself as a java class.
					Required to have no-args constructor and implement
					net.ikarus_systems.icarus.ui.actions.BindableAction interface!
				</doc-text>
			</doc>
		</parameter-def>
		<parameter-def id="id">
			<doc>
				<doc-text>
					Globally unique id of the action, used to register the action
					to the actions framework.
				</doc-text>
			</doc>
		</parameter-def>
		<parameter-def id="properties" type="any" multiplicity="none-or-one">
			<doc>
				<doc-text>
					Optional collection of properties that will be passed as
					a Map to the BindableAction when actual binding
					is performed. Every 'parameter' element within this one will
					be used as one entry in this map with 'id' as key and 'value'
					as value. If an element contains child-elements then its value
					will be ignored and replaced by a new Map defined by those children.
				</doc-text>
			</doc>
		</parameter-def>
	</extension-point>
			
	<extension-point id="ContentType" parent-point-id="Localizable" 
			parent-plugin-id="net.ikarus_systems.icarus.core">
		<doc>
			<doc-text>
				Allows easy declaration of new content types at plug-in startup time.
				See net.ikarus_systems.icarus.util.data.ContentType for documentation.
			</doc-text>
		</doc>
		<parameter-def id="contentClass">
			<doc>
				<doc-text>
					Superclass or interface for content of this type.
				</doc-text>
			</doc>
		</parameter-def>
		<parameter-def id="filter" multiplicity="none-or-one">
			<doc>
				<doc-text>
					Optional filter implementation of net.ikarus_systems.icarus.util.Filter interface
					to determine compatibility. Passed objects will be of type java.lang.Class.
				</doc-text>
			</doc>
		</parameter-def>
		<parameter-def id="properties" multiplicity="none-or-one" type="any">
			<doc>
				<doc-text>
					List of sub-parameters that serve as key-value pairs for
					creation of a properties map.
				</doc-text>
			</doc>
		</parameter-def>
	</extension-point>
			
	<extension-point id="DataConverter" parent-point-id="Localizable" 
			parent-plugin-id="net.ikarus_systems.icarus.core">
		<doc>
			<doc-text>
				Allows for registration of data converters at plug-in startup time
				without the need to actualls activate the hosting plug-in. Converters
				registered by means of this extension-point will be instantiated only
				when asked for conversion.
			</doc-text>
		</doc>
		<parameter-def id="class">
			<doc>
				<doc-text>
					Converter class itself, needs to implement net.ikarus_systems.icarus.util.data.Converter interface!
				</doc-text>
			</doc>
		</parameter-def>
		<parameter-def id="accuracy" type="number">
			<doc>
				<doc-text>
					Conversion accuracy A that may be between 0 and 1 (including 1).
				</doc-text>
			</doc>
		</parameter-def>
		<parameter-def id="inputType" type="extension-id"
				custom-data="net.ikarus_systems.icarus.plugins.core@ContentType">
			<doc>
				<doc-text>
					Input content type.
				</doc-text>
			</doc>
		</parameter-def>
		<parameter-def id="outputType" type="extension-id"
				custom-data="net.ikarus_systems.icarus.plugins.core@ContentType">
			<doc>
				<doc-text>
					Result content type.
				</doc-text>
			</doc>
		</parameter-def>
	</extension-point>
			
	<extension-point id="ErrorFormatter">
		<doc>
			<doc-text>
				See net.ikarus_systems.icarus.util.Exceptions
			</doc-text>
		</doc>
		<parameter-def id="class">
			<doc>
				<doc-text>
					Implementing class, needs to have no-args constructor and implement
					net.ikarus_systems.icarus.util.ErrorFormatter interface.
				</doc-text>
			</doc>
		</parameter-def>
		<parameter-def id="throwableClass" multiplicity="one-or-more">
			<doc>
				<doc-text>
					Class name of throwable this formatter wants to handle.
					Note that only the first formatter for a certain throwable will
					be saved.
				</doc-text>
			</doc>
		</parameter-def>
	</extension-point>
			
	<extension-point id="Filter" parent-point-id="Localizable" 
			parent-plugin-id="net.ikarus_systems.icarus.core">
		<doc>
			<doc-text>
				See net.ikarus_systems.icarus.util.Filter
			</doc-text>
		</doc>
		<parameter-def id="class">
			<doc>
				<doc-text>
					Implementing class, needs to have no-args constructor and implement
					net.ikarus_systems.icarus.util.Filter interface.
				</doc-text>
			</doc>
		</parameter-def>
		<parameter-def id="contentType" multiplicity="one-or-more" type="extension-id"
				custom-data="net.ikarus_systems.icarus.core@ContentType">
			<doc>
				<doc-text>
					Arbitrary number of content types this filter is able to handle.
				</doc-text>
			</doc>
		</parameter-def>
	</extension-point>
			
	<extension-point id="Link">
		<doc>
			<doc-text>
				Allows the virtual registration of an extension for multiple
				extension-points. If for example an extension defining a View
				for a special type of perspective wishes to to contribute to some
				other (maybe more general) perspective or other extension-point
				it is not allowed to do so by the plug-in framework. Declaring
				a virtual link however enables the PluginUtils utilities to
				properly collect all extensions for a particular extension-point
				whether they are directly connected to it or just provide
				compatible parameters.
			</doc-text>
		</doc>
		<parameter-def id="extension" type="extension-id">
			<doc>
				<doc-text>
					The extension that wishes to be linked. As a general rule the
					extension defining the link should be named according to the
					extension it is linking. So for example an extension named
					'Foo' should be linekd by another extension with the id 'FooLink'.
				</doc-text>
			</doc>
		</parameter-def>
		<parameter-def id="extension-point" type="extension-point-id" multiplicity="one-or-more">
			<doc>
				<doc-text>
					Arbitrary number of extension-points that will be saved as link targets.
					Note that no validation support is available for linked extensions!
				</doc-text>
			</doc>
		</parameter-def>
	</extension-point>
			
	<extension-point id="UIHelper">
		<doc>
			<doc-text>
				See net.ikarus_systems.icarus.ui.UIHelperRegistry
			</doc-text>
		</doc>
		<parameter-def id="class">
			<doc>
				<doc-text>
					Implementing class, needs to have no-args constructor.
				</doc-text>
			</doc>
		</parameter-def>
		<parameter-def id="contentType" type="extension-id"
				custom-data="net.ikarus_systems.icarus.core@ContentType">
			<doc>
				<doc-text>
					Id of the content type this helper should be registered for. 
				</doc-text>
			</doc>
		</parameter-def>
		<parameter-def id="interface" multiplicity="one-or-more">
			<doc>
				<doc-text>
					Fully qualified class name of the interface this helper	implements.
				</doc-text>
			</doc>
		</parameter-def>
		<parameter-def id="override" multiplicity="none-or-one" type="boolean" default-value="false">
			<doc>
				<doc-text>
					Allows extensions to override previously registered helpers and in that
					way promote themselves to exclusive helper for the specified target object type. 
				</doc-text>
			</doc>
		</parameter-def>
	</extension-point>
	
	
	<!-- Standard Extensions -->
	
	<extension id="SerializableElements" plugin-id="net.ikarus_systems.icarus.core" point-id="Serializable">
		<parameter id="class" value="net.ikarus_systems.icarus.util.annotation.HighlightType" />
		<parameter id="class" value="net.ikarus_systems.icarus.util.annotation.AnnotationDisplayMode" />
	</extension>
	
	<!-- PERSPECTIVES AND VIEWS -->
	
	<extension id="ManagementPerspective" plugin-id="net.ikarus_systems.icarus.core" point-id="Perspective">
		<doc>
			<doc-text>
				Perspective that allows the management of internal settings,
				overview of plug-ins states and options to (de)activate certain
				plug-ins or manage update-repositories.
			</doc-text>
		</doc>
		<parameter id="name" value="plugins.core.managementPerspective.identity.name" />
		<parameter id="description" value="plugins.core.managementPerspective.identity.description" />
		<parameter id="resources" value="net.ikarus_systems.icarus.plugins.core.resources.management" />
		<parameter id="class" value="net.ikarus_systems.icarus.plugins.core.ManagementPerspective" />
		<parameter id="icon" value="net/ikarus_systems/icarus/plugins/core/management-perspective.gif" />
		<parameter id="preview" value="net/ikarus_systems/icarus/plugins/core/management-perspective-preview.jpg" />
	</extension>
	
	<extension id="DefaultLogView" plugin-id="net.ikarus_systems.icarus.core" point-id="UtilityView">
		<doc>
			<doc-text>
				Compact log implementation that allows the user to filter saved
				records etc...
			</doc-text>
		</doc>
		<parameter id="name" value="plugins.core.logView.identity.name" />
		<parameter id="description" value="plugins.core.logView.identity.description" />
		<parameter id="resources" value="net.ikarus_systems.icarus.plugins.core.resources.core" />
		<parameter id="class" value="net.ikarus_systems.icarus.plugins.core.log.LogView" />
		<parameter id="icon" value="net/ikarus_systems/icarus/plugins/core/log/log-view.gif" />
		<parameter id="alignment" value="bottom" />
		<parameter id="priority" value="low" />
		
		<!-- CAPABILITIES -->
		<parameter id="capabilities">
			<parameter id="clear" />
		</parameter>
	</extension>
	
	<extension id="TableView" plugin-id="net.ikarus_systems.icarus.core" point-id="UtilityView">
		<doc>
			<doc-text>
				Generic view for presentation of arbitrary data in a tabular style.
				Relies on helper implementations of type net.ikarus_systems.icarus.ui.table.TablePresenter
				to do the actual presentation job.
			</doc-text>
		</doc>
		<parameter id="name" value="plugins.core.tableView.identity.name" />
		<parameter id="description" value="plugins.core.tableView.identity.description" />
		<parameter id="resources" value="net.ikarus_systems.icarus.plugins.core.resources.core" />
		<parameter id="class" value="net.ikarus_systems.icarus.plugins.core.output.TableView" />
		<parameter id="icon" value="net/ikarus_systems/icarus/plugins/core/output/table-view.gif" />
		<parameter id="alignment" value="right" />
		<parameter id="priority" value="default" />
		
		<!-- CAPABILITIES -->
		<parameter id="capabilities">
			<parameter id="clear" />
			<parameter id="display" />
			<parameter id="present" />
		</parameter>
	</extension>
	
	<extension id="PluginExplorerView" plugin-id="net.ikarus_systems.icarus.core" point-id="ManagementView">
		<doc>
			<doc-text>
				Tree based overview of registered plug-ins
			</doc-text>
		</doc>
		<parameter id="name" value="plugins.core.pluginExplorerView.identity.name" />
		<parameter id="description" value="plugins.core.pluginExplorerView.identity.description" />
		<parameter id="resources" value="net.ikarus_systems.icarus.plugins.core.resources.management" />
		<parameter id="class" value="net.ikarus_systems.icarus.plugins.core.explorer.PluginExplorerView" />
		<parameter id="icon" value="net/ikarus_systems/icarus/plugins/core/explorer/plugin-explorer-view.gif" />
		<parameter id="alignment" value="left" />
		<parameter id="priority" value="standard" />
		
		<!-- CAPABILITIES -->
		<parameter id="capabilities">
			<parameter id="select" />
		</parameter>
	</extension>
	
	<extension id="DefaultOutputView" plugin-id="net.ikarus_systems.icarus.core" point-id="View">
		<doc>
			<doc-text>
				Detail view for displaying arbitrary data like plugin elements 
				or log records in textual form.
			</doc-text>
		</doc>
		<parameter id="name" value="plugins.core.outputView.identity.name" />
		<parameter id="description" value="plugins.core.outputView.identity.description" />
		<parameter id="resources" value="net.ikarus_systems.icarus.plugins.core.resources.core" />
		<parameter id="class" value="net.ikarus_systems.icarus.plugins.core.output.DefaultOutputView" />
		<parameter id="icon" value="net/ikarus_systems/icarus/plugins/core/output/default-output-view.gif" />
		<parameter id="alignment" value="center" />
		<parameter id="priority" value="low" />
		<parameter id="requiresTab" value="false" />
		<parameter id="activateEarly" value="true" />
		
		<!-- CAPABILITIES -->
		<parameter id="capabilities">
			<parameter id="clear" />
			<parameter id="display" />
			<parameter id="display" value="StringContentType" />
		</parameter>
	</extension>
	
	<extension id="ExtensionPointOutlineView" plugin-id="net.ikarus_systems.icarus.core" point-id="ManagementView">
		<doc>
			<doc-text>
				Detail view for extension points to list connected extensions and statistics.
			</doc-text>
		</doc>
		<parameter id="name" value="plugins.core.extensionPointOutlineView.identity.name" />
		<parameter id="description" value="plugins.core.extensionPointOutlineView.identity.description" />
		<parameter id="resources" value="net.ikarus_systems.icarus.plugins.core.resources.management" />
		<parameter id="class" value="net.ikarus_systems.icarus.plugins.core.explorer.ExtensionPointOutlineView" />
		<parameter id="icon" value="net/ikarus_systems/icarus/plugins/core/explorer/extension-point-outline-view.gif" />
		<parameter id="alignment" value="right" />
		<parameter id="priority" value="standard" />
		<parameter id="activateEarly" value="true" />
		
		<!-- CAPABILITIES -->
		<parameter id="capabilities">
			<parameter id="clear" />
			<parameter id="display" value="ExtensionPointContentType" />
		</parameter>
	</extension>
	
	<extension id="ExtensionPointHierarchyView" plugin-id="net.ikarus_systems.icarus.core" point-id="ManagementView">
		<doc>
			<doc-text>
				Detail view for extension point hierarchies.
			</doc-text>
		</doc>
		<parameter id="name" value="plugins.core.extensionPointHierarchyView.identity.name" />
		<parameter id="description" value="plugins.core.extensionPointHierarchyView.identity.description" />
		<parameter id="resources" value="net.ikarus_systems.icarus.plugins.core.resources.management" />
		<parameter id="class" value="net.ikarus_systems.icarus.plugins.core.explorer.ExtensionPointHierarchyView" />
		<parameter id="icon" value="net/ikarus_systems/icarus/plugins/core/explorer/extension-point-hierarchy-view.gif" />
		<parameter id="alignment" value="right" />
		<parameter id="priority" value="low" />
		
		<!-- CAPABILITIES -->
		<parameter id="capabilities">
			<parameter id="clear" />
			<parameter id="display" value="ExtensionPointContentType" />
		</parameter>
	</extension>
	
	<!-- HELPERS -->
	
	<extension id="LogRecordListCellRenderer" plugin-id="net.ikarus_systems.icarus.core" point-id="UIHelper">
		<doc>
			<doc-text>
				List cell renderer implementation for log records.
			</doc-text>
		</doc>
		<parameter id="class" value="net.ikarus_systems.icarus.plugins.core.log.LogListCellRenderer" />
		<parameter id="contentType" value="net.ikarus_systems.icarus.core@LogRecordContentType" />
		<parameter id="interface" value="javax.swing.ListCellRenderer" />
	</extension>
	
	<extension id="LogRecordPresenter" plugin-id="net.ikarus_systems.icarus.core" point-id="UIHelper">
		<doc>
			<doc-text>
				Presenter implementation for log records.
			</doc-text>
		</doc>
		<parameter id="class" value="net.ikarus_systems.icarus.plugins.core.log.LogRecordPresenter" />
		<parameter id="contentType" value="net.ikarus_systems.icarus.core@LogRecordContentType" />
		<parameter id="interface" value="net.ikarus_systems.icarus.ui.view.AWTPresenter" />
	</extension>
	
	<extension id="PluginElementPresenter" plugin-id="net.ikarus_systems.icarus.core" point-id="UIHelper">
		<doc>
			<doc-text>
				Presenter implementation for plug-in elements that are documentable.
			</doc-text>
		</doc>
		<parameter id="class" value="net.ikarus_systems.icarus.plugins.core.output.PluginElementPresenter" />
		<parameter id="contentType" value="net.ikarus_systems.icarus.core@DocumentableContentType" />
		<parameter id="interface" value="net.ikarus_systems.icarus.ui.view.AWTPresenter" />
	</extension>
	
	<extension id="ExtensionListCellRenderer" plugin-id="net.ikarus_systems.icarus.core" point-id="UIHelper">
		<doc>
			<doc-text>
				Default list cell renderer usable for extensions and other plug-in elements.
			</doc-text>
		</doc>
		<parameter id="class" value="net.ikarus_systems.icarus.plugins.ExtensionListCellRenderer" />
		<parameter id="contentType" value="net.ikarus_systems.icarus.core@ExtensionContentType" />
		<parameter id="interface" value="javax.swing.ListCellRenderer" />
	</extension>
	
	<extension id="DataListPresenter" plugin-id="net.ikarus_systems.icarus.core" point-id="UIHelper">
		<doc>
			<doc-text>
				ListPresenter implementation for net.ikarus_systems.icarus.util.data.DataList content.
			</doc-text>
		</doc>
		<parameter id="class" value="net.ikarus_systems.icarus.util.data.DataListPresenter" />
		<parameter id="contentType" value="net.ikarus_systems.icarus.core@DataListContentType" />
		<parameter id="interface" value="net.ikarus_systems.icarus.ui.view.ListPresenter" />
	</extension>
	
	<!-- CONTENT TYPES -->
	
	<extension id="LogRecordContentType" plugin-id="net.ikarus_systems.icarus.core" point-id="ContentType">
		<doc>
			<doc-text>
				Represents the java.util.logging.LogRecord content type.
			</doc-text>
		</doc>
		<parameter id="contentClass" value="java.util.logging.LogRecord" />
	</extension>
	
	<extension id="LocationContentType" plugin-id="net.ikarus_systems.icarus.core" point-id="ContentType">
		<doc>
			<doc-text>
				Represents the net.ikarus_systems.icarus.util.location.Location content type.
			</doc-text>
		</doc>
		<parameter id="contentClass" value="net.ikarus_systems.icarus.util.location.Location" />
	</extension>
	
	<extension id="IdentityContentType" plugin-id="net.ikarus_systems.icarus.core" point-id="ContentType">
		<doc>
			<doc-text>
				Represents the net.ikarus_systems.icarus.util.id.Identity content type.
			</doc-text>
		</doc>
		<parameter id="contentClass" value="net.ikarus_systems.icarus.util.id.Identity" />
	</extension>
	
	<extension id="MessageContentType" plugin-id="net.ikarus_systems.icarus.core" point-id="ContentType">
		<doc>
			<doc-text>
				Represents the net.ikarus_systems.icarus.util.mpi.Message content type.
			</doc-text>
		</doc>
		<parameter id="contentClass" value="net.ikarus_systems.icarus.util.mpi.Message" />
	</extension>
	
	<extension id="DocumentableContentType" plugin-id="net.ikarus_systems.icarus.core" point-id="ContentType">
		<doc>
			<doc-text>
				Represents the org.java.plugin.registry.Documentable content type.
			</doc-text>
		</doc>
		<parameter id="contentClass" value="org.java.plugin.registry.Documentable" />
	</extension>
	
	<extension id="ExtensionContentType" plugin-id="net.ikarus_systems.icarus.core" point-id="ContentType">
		<doc>
			<doc-text>
				Represents the org.java.plugin.registry.Extension content type.
			</doc-text>
		</doc>
		<parameter id="contentClass" value="org.java.plugin.registry.Extension" />
	</extension>
	
	<extension id="PluginDescriptorContentType" plugin-id="net.ikarus_systems.icarus.core" point-id="ContentType">
		<doc>
			<doc-text>
				Represents the org.java.plugin.registry.PluginDescriptor content type.
			</doc-text>
		</doc>
		<parameter id="contentClass" value="org.java.plugin.registry.PluginDescriptor" />
	</extension>
	
	<extension id="PluginFragmentContentType" plugin-id="net.ikarus_systems.icarus.core" point-id="ContentType">
		<doc>
			<doc-text>
				Represents the org.java.plugin.registry.PluginFragment content type.
			</doc-text>
		</doc>
		<parameter id="contentClass" value="org.java.plugin.registry.PluginFragment" />
	</extension>
	
	<extension id="ExtensionPointContentType" plugin-id="net.ikarus_systems.icarus.core" point-id="ContentType">
		<doc>
			<doc-text>
				Represents the org.java.plugin.registry.ExtensionPoint content type.
			</doc-text>
		</doc>
		<parameter id="contentClass" value="org.java.plugin.registry.ExtensionPoint" />
	</extension>
	
	<extension id="DataListContentType" plugin-id="net.ikarus_systems.icarus.core" point-id="ContentType">
		<doc>
			<doc-text>
				Represents the net.ikarus_systems.icarus.util.data.DataList content type.
			</doc-text>
		</doc>
		<parameter id="contentClass" value="net.ikarus_systems.icarus.util.data.DataList" />
	</extension>
	
	<extension id="TextItemContentType" plugin-id="net.ikarus_systems.icarus.core" point-id="ContentType">
		<doc>
			<doc-text>
				Represents the net.ikarus_systems.icarus.ui.helper.TextItem content type.
			</doc-text>
		</doc>
		<parameter id="contentClass" value="net.ikarus_systems.icarus.ui.helper.TextItem" />
	</extension>
</plugin>