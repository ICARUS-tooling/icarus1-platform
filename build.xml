<?xml version="1.0" encoding="UTF-8"?>
<project name="ICARUS main build file" default="help" basedir=".">
	<property name="app.name" value="ICARUS" />
	<property name="app.version" value="1.0.4" />

	<property name="implementation.version" value="${app.version}" />
	<property name="implementation.vendor" value="Markus Gaertner, Gregor Thiele" />
	
	<property name="home" value="${basedir}/svnversion.properties" />

	<property name="version.properties" value="${basedir}/core/de.ims.icarus/source/de/ims/icarus/version.properties" />

	<property name="build.home" value="${basedir}/build" />

	<property name="dist.home" value="${basedir}/dist" />
	
	<property name="source.home" value="${basedir}/source" />

	<property name="lib.home" value="${basedir}/lib" />

	<property name="license.file" value="${basedir}/license.txt" />

	<property name="plugins.home" value="${basedir}/plugins" />
	<property name="plugins.build" value="${build.home}/plugins" />
	<property name="plugins.source" value="${source.home}/plugins" />

	<!--================= COMPILER OPTIONS =================-->
	<property name="compile.debug"       value="true"/>
	<property name="compile.deprecation" value="false"/>
	<property name="compile.optimize"    value="true"/>

	<property name="temp.dir" value="${basedir}/temp" />

	<path id="classpath">
		<fileset dir="lib" includes="*.jar" excludes="**/.*" />
		<fileset dir="ant/lib" includes="*.jar" excludes="**/.*" />
	</path>

	<!-- include special JPF tasks -->
	<typedef resource="org/java/plugin/tools/ant/jpf-tasks.properties">
		<classpath refid="classpath" />
	</typedef>
	
	<!-- include special SvnAnt tasks -->
	<typedef resource="org/tigris/subversion/svnant/svnantlib.xml"> 
		<classpath refid="classpath" />
	</typedef> 
	
	<!-- include special Ant-Contrib tasks -->
	<typedef resource="net/sf/antcontrib/antcontrib.properties"> 
		<classpath refid="classpath" />
	</typedef>

	<var name="build.ims" value="false" />

	<target name="help">
		<echo>
			<![CDATA[
${app.name} build file:
clean - cleans up the project build folder
build - builds entire project
build-ims - builds project and includes restricted plug-ins/resources
dist  - creates binary and source distribution packages
dist-ims - same as 'dist' but with same additions as 'build-ims'
]]>
		</echo>
	</target>

	<target name="-version-properties" description="generates a properties file containing important version informations">
		<svn> 
			<status path="${basedir}" revisionProperty="svn.revision" /> 
		</svn>
		<delete file="${version.properties}" />
		<propertyfile
		    file="${version.properties}"
		    comment="Version Information generated by build script">
		  <entry  key="app.name" value="${app.name}"/>
		  <entry  key="app.version"  value="${app.version}"/>
		  <entry  key="app.revision"  value="${svn.revision}"/>
		  <entry  key="build.date" type="date" value="now" pattern="yyyy-MM-dd HH:mm:ss"/>
		  <entry  key="app.vendor" value="Markus Gaertner, Gregor Thiele" />
		</propertyfile>
	</target>

	<target name="clean" description="Cleans up the project build folder">
		<tstamp>
			<format property="dt-stamp" pattern="yyyy-MM-dd-HH-mm" />
			<format property="d-stamp" pattern="yyyy-MM-dd" />
		</tstamp>
		<delete dir="${build.home}" quiet="true" />
	</target>

	<target name="-init">
		<mkdir dir="${build.home}" />
	</target>

	<target name="-build-plugins">
		<mkdir dir="${build.home}/plugins" />
		<ant dir="plugins/de.ims.icarus.plugins.core" target="${target}" />
		<ant dir="plugins/de.ims.icarus.plugins.language_tools" target="${target}" />
		<ant dir="plugins/de.ims.icarus.plugins.jgraph" target="${target}" />
		<ant dir="plugins/de.ims.icarus.plugins.search_tools" target="${target}" />
		<ant dir="plugins/de.ims.icarus.plugins.dependency" target="${target}" />
		<ant dir="plugins/de.ims.icarus.plugins.matetools" target="${target}" />
		<ant dir="plugins/de.ims.icarus.plugins.tcf" target="${target}" />
		<ant dir="plugins/de.ims.icarus.plugins.weblicht" target="${target}" />
		
		<if>
			<equals arg1="${build.ims}" arg2="true" />
			<then>
				<ant dir="plugins/de.ims.icarus.plugins.coref" target="${target}" />
				<ant dir="plugins/de.ims.icarus.plugins.errormining" target="${target}" />
			</then>
		</if>
	</target>

	<target name="-compile">
		<delete includeEmptyDirs="true">
			<fileset dir="${dest.dir}" includes="**/*" />
		</delete>

		<javac srcdir="${src.dir}" destdir="${dest.dir}" executable="javac"
			optimize="false" debug="on" classpathref="${classpathref}"/>

	</target>

	<target name="build" depends="clean,-init,-version-properties" description="Builds entire project">

		<ant dir="launcher/de.ims.icarus" target="build" />
		<ant dir="core/de.ims.icarus" target="build" />

		<antcall target="-build-plugins">
			<param name="target" value="build" />
		</antcall>

		<if>
			<equals arg1="${build.ims}" arg2="true" />
			<then>
				<mkdir dir="${build.home}/data"/>
				<copy todir="${build.home}/data">
					<fileset dir="${basedir}/data">
						<include name="weblicht.xml"/>
						<include name="webchain.xml"/>
						<include name="ngramquery.xml"/>
						<include name="ngramquery_one.xml"/>
					</fileset>
				</copy>
			</then>
		</if>
	</target>

	<target name="build-ims" description="Builds entire project (for IMS internal staff members)">

		<var name="build.ims" value="true" />
		<antcall target="build" />
	</target>

	<target name="dist"
	        depends="clean,build"
	        description="Prepares distribution packages">
		
		<!-- Collect source files -->
		<ant dir="launcher/de.ims.icarus" target="source" />
		<ant dir="core/de.ims.icarus" target="source" />

		<antcall target="-build-plugins">
			<param name="target" value="source" />
		</antcall>
		<copy todir="${source.home}" file="${license.file}" />

		<copy todir="${source.home}/${app.name}">
			<fileset dir="${source.home}">
				<exclude name="${app.name}/*" />
				<include name="**/*"/>
			</fileset>
		</copy>
		<delete includeemptydirs="true">
			<fileset dir="${source.home}">
				<include name="**/*" />
				<exclude name="${app.name}/**/*" />
			</fileset>
		</delete>

		<!-- Jar the sources and move to build folder -->
		<jar destfile="${source.home}/${app.name}-src-${app.version}.jar">
			<fileset dir="${source.home}" includes="**/*" />
		</jar>
		<delete includeemptydirs="true">
			<fileset dir="${source.home}">
				<include name="**/*" />
				<exclude name="${app.name}-???-${app.version}.jar" />
			</fileset>
		</delete>
		<mkdir dir="${build.home}/src"/>
		<copy todir="${build.home}/src" file="${source.home}/${app.name}-src-${app.version}.jar" />
		
		<!-- Copy utility stuff to build folder -->
		<copy todir="${build.home}">
			<fileset dir="${basedir}/quickstart-guide">
				<include name="*.pdf"/>
			</fileset>
		</copy>
		<copy todir="${build.home}" file="${license.file}" />

		<!-- Zip build folder and move to dist fodler -->
		<copy todir="${build.home}/${app.name}-${app.version}">
			<fileset dir="${build.home}">
				<exclude name="${app.name}-${app.version}/*" />
				<include name="**/*"/>
			</fileset>
		</copy>
		<zip destfile="${build.home}/${app.name}-bin-${app.version}.zip"
		     duplicate="fail"
		     update="false">
			<fileset dir="${build.home}">
				<include name="${app.name}-${app.version}/**/*" />
			</fileset>
		</zip>
		<copy todir="${dist.home}" file="${build.home}/${app.name}-bin-${app.version}.zip" />
		
		<!-- Cleanup build stuff -->
		<delete file="${build.home}/${app.name}-bin-${app.version}.zip" />
		<delete includeemptydirs="true">
			<fileset dir="${build.home}">
				<include name="${app.name}-${app.version}/**/*" />
			</fileset>
		</delete>
	</target>

	<target name="dist-ims" description="Prepares distribution packages (for IMS internal staff members)">

		<var name="build.ims" value="true" />
		<antcall target="dist" />
	</target>
</project>
