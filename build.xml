<?xml version="1.0" encoding="UTF-8"?>
<project name="ICARUS main build file" default="help" basedir=".">

	<!--================= GENERAL OPTIONS =================-->
	
	<!--Application properties -->
	<property name="app.name" value="ICARUS" />
	<property name="app.version" value="1.0.5" />

	<property name="implementation.version" value="${app.version}" />
	<property name="implementation.vendor" value="Markus Gaertner, Gregor Thiele" />

	<!-- Special properties file to forward build information to the application -->
	<property name="version.properties" value="${basedir}/core/de.ims.icarus/source/de/ims/icarus/version.properties" />

	<!-- Home folders -->
	<property name="build.home" value="${basedir}/build" />

	<property name="dist.home" value="${basedir}/dist" />

	<property name="source.home" value="${basedir}/source" />

	<property name="lib.home" value="${basedir}/lib" />

	<property name="antlib.home" value="${basedir}/ant/lib" />

	<property name="license.file" value="${basedir}/license.txt" />

	<property name="docs.home" value="${build.home}/docs" />

	<property name="plugins.home" value="${basedir}/plugins" />
	<property name="plugins.build" value="${build.home}/plugins" />
	<property name="plugins.source" value="${source.home}/plugins" />
	<property name="plugins.docs" value="${docs.home}/plugins" />
	
	<!--================= COMPILER OPTIONS =================-->
	<property name="compile.debug"       value="true"/>
	<property name="compile.deprecation" value="false"/>
	<property name="compile.optimize"    value="true"/>

	<property name="temp.dir" value="${basedir}/temp" />

	<path id="app.classpath">
		<pathelement location="${lib.home}/commons-logging.jar" />
		<pathelement location="${lib.home}/log4j.jar" />
		<pathelement location="${lib.home}/jpf.jar" />
	</path>

	<!--================= CLASSPATHES =================-->

	<path id="build.classpath">
		<path refid="app.classpath" />
		
		<pathelement location="${lib.home}/jpf-tools.jar" />

	    <pathelement location="${antlib.home}/ant-contrib.jar" />
		
	    <pathelement location="${antlib.home}/svnant.jar" />
	    <pathelement location="${antlib.home}/svnClientAdapter.jar" />
	    <pathelement location="${antlib.home}/jna-3.4.0.jar" />

	    <pathelement location="${antlib.home}/svnkit-1.7.5-v1.jar" />
	    <pathelement location="${antlib.home}/svnkit-javahl16-1.7.5-v1.jar" />
	    <pathelement location="${antlib.home}/sqljet-1.1.4.jar" />
	    <pathelement location="${antlib.home}/antlr-runtime-3.4.jar" />
	    <pathelement location="${antlib.home}/sequence-library-1.0.2.jar" />
	</path>

	<!--================= TASK DEFINITIONS =================-->

	<!-- include special JPF tasks -->
	<typedef resource="org/java/plugin/tools/ant/jpf-tasks.properties">
		<classpath refid="build.classpath" />
	</typedef>

	<!-- include special SvnAnt tasks -->
	<typedef resource="org/tigris/subversion/svnant/svnantlib.xml">
		<classpath refid="build.classpath" />
	</typedef>

	<!-- include special Ant-Contrib tasks -->
	<typedef resource="net/sf/antcontrib/antlib.xml">
		<classpath refid="build.classpath" />
	</typedef>	

	<!--================= TARGETS =================-->

	<target name="help">
		<echo>
			<![CDATA[
${app.name} build file:
clean - cleans up the project build folder
build - builds entire project
build-ims - builds project and includes restricted plug-ins/resources
dist  - creates binary and source distribution packages
dist-ims - same as 'dist' but with same additions as 'build-ims'
]]>
		</echo>
	</target>

	<target name="-version-properties" description="generates a properties file containing important version informations">
		<svn>
			<status path="${basedir}" revisionProperty="svn.revision" />
		</svn>
		<delete file="${version.properties}" />
		<propertyfile
		    file="${version.properties}"
		    comment="Version Information generated by build script">
			<entry  key="app.name" value="${app.name}"/>
			<entry  key="app.version"  value="${app.version}"/>
			<entry  key="app.revision"  value="${svn.revision}"/>
			<entry  key="build.date" type="date" value="now" pattern="yyyy-MM-dd HH:mm:ss"/>
			<entry  key="app.vendor" value="Markus Gaertner, Gregor Thiele" />
		</propertyfile>
	</target>

	<target name="clean" description="Cleans up the project build folder">
		<tstamp>
			<format property="dt-stamp" pattern="yyyy-MM-dd-HH-mm" />
			<format property="d-stamp" pattern="yyyy-MM-dd" />
		</tstamp>
		<delete dir="${build.home}" quiet="true" />
	</target>

	<target name="-init">
		<mkdir dir="${build.home}" />
	</target>

	<target name="-compile">
		<mkdir dir="${dir}/classes" />
		<delete includeEmptyDirs="true">
			<fileset dir="${dir}/classes" includes="**/*" />
		</delete>
		<javac destdir="${dir}/classes"
			srcdir="${dir}/source"
		    classpathref="classpath"
			debug="${compile.debug}"
			deprecation="${compile.deprecation}"
			optimize="${compile.optimize}"
			encoding="UTF-8"
			includeantruntime="false" />
	</target>

	<target name="-build-plugin">

		<jpf-info manifest="${dir}/plugin.xml"
		          propertyid="plugin.id"
		          propertyversion="plugin.version" />
		<local name="plugin.home" />
		<property name="plugin.home"
		          value="${plugins.build}/${plugin.id}" />

		<local name="classpath" />
		<path id="classpath">
			<path refid="app.classpath" />
			<pathelement location="${basedir}/core/de.ims.icarus/classes" />
			<fileset dir="${build.home}" includes="**/*.jar" />
		</path>
		<jpf-path basedir="${plugins.home}" 
			includes="*/plugin.xml,*/plugin-fragment.xml" 
			pathidref="classpath"
			verbose="false"
			pluginid="${plugin.id}" />
		
		<!--
		<pathconvert property="path.out" refid="classpath" />
		<echo>Classpath for plugin ${plugin.id}: ${path.out}</echo>
		-->

		<switch value="${target}" caseinsensitive="true">
			<!-- Compile sources and wrap al resource files and manifests into a jar file -->
			<case value="build">
				<echo>Building plug-in ${plugin.id} to folder ${plugin.home}</echo>
				<antcall target="-compile" inheritrefs="true" />
				<copy todir="${dir}/classes">
					<fileset dir="${dir}/source"
					         includes="**/*"
					         excludes="**/.java,**/.*" />
				</copy>
				<copy todir="${dir}/classes">
					<fileset dir="${dir}"
					         includes="plugin.xml,plugin-fragment.xml" />
				</copy>

				<jar jarfile="${plugin.home}/${plugin.id}.jar" basedir="${dir}/classes" 
					index="true" />

				<if>
					<available file="${dir}/lib" />
					<then>
						<mkdir dir="${plugin.home}/lib" />
						<copy todir="${plugin.home}/lib">
							<fileset dir="${dir}/lib"
							         includes="**/*"
							         excludes="**/.*" />
						</copy>
					</then>
				</if>
			</case>

			<!-- Just copy over the source files -->
			<case value="source">
				<echo>Distributing plug-in ${plugin.id} sources to folder ${plugin.home}</echo>
				<copy todir="${plugins.source}/${plugin.id}">
					<fileset dir="${dir}/source"
					         includes="**/*"
					         excludes="**/.*" />
				</copy>
			</case>

			<!-- Generate javadocs for plugin -->
			<case value="docs">
				<echo>Generating javadoc for plug-in ${plugin.id} to folder ${plugins.docs}/${plugin.id}</echo>
				<javadoc destdir="${plugins.docs}/${plugin.id}"
				        classpathref="classpath"
						encoding="UTF-8"
						docencoding="UTF-8"
						charset="UTF-8"
				        sourcepath="${dir}/source">
				</javadoc>
			</case>

			<!-- Default is 'help' -->
			<default>
				<echo>
					<![CDATA[
					${plugin.id} plug-in build call:
					Use top-level project build file and target to build application.
					]]>
				</echo>
			</default>
		</switch>
	</target>
	
	<target name="-docs" unless="nodoc">
		
		<!--
		<local name="classpath" />
		<path id="classpath">
			<path refid="app.classpath" />
			<fileset dir="${build.home}" includes="**/*.jar" />
		</path>

		<echo>Generating javadoc for ICARUS ${docs.home}</echo>
		<javadoc destdir="${docs.home}"
		        classpathref="classpath"
				encoding="UTF-8"
		        sourcepath="${source.home}">
		</javadoc>
		-->
		
		<ant dir="launcher/de.ims.icarus" target="docs" inheritrefs="true" />
		<ant dir="core/de.ims.icarus" target="docs" inheritrefs="true" />

		<antcall target="-build-plugins" inheritrefs="true">
			<param name="target" value="docs" />
		</antcall>
	</target>

	<target name="-build">
		<local name="home" />
		<property name="home"
		          value="${dest.dir}" />

		<path id="classpath" refid="app.classpath" />

		<switch value="${target}" caseinsensitive="true">
			<!-- Compile sources and wrap all resource files and manifests into a jar file -->
			<case value="build">
				<echo>Building ${id} to folder ${home}</echo>
				<antcall target="-compile" inheritrefs="true">
					<param name="dir" value="${dir}" />
					<reference refid="classpath" />
				</antcall>
				<copy todir="${dir}/classes">
					<fileset dir="${dir}/source"
					         includes="**/*"
					         excludes="**/.java" />
				</copy>

				<jar jarfile="${home}/${id}.jar" basedir="${dir}/classes" 
					index="true" />
			</case>

			<!-- Just copy over the source files -->
			<case value="source">
				<echo>Distributing plug-in ${plugin.id} sources to folder ${plugin.home}</echo>
				<copy todir="${source.home}/${id}">
					<fileset dir="${dir}/source"
					         includes="**/*"
					         excludes="**/.*" />
				</copy>
			</case>

			<!-- Generate javadocs -->
			<case value="docs">
				<echo>Generating javadoc for ${id} to folder ${home}/docs</echo>
				<javadoc destdir="${home}/docs"
				        classpathref="classpath"
						encoding="UTF-8"
				        sourcepath="${dir}/source">
				</javadoc>
			</case>

			<!-- Default is 'help' -->
			<default>
				<echo>
					<![CDATA[
					${id} build call:
					Use top-level project build file and target to build application.
					]]>
				</echo>
			</default>
		</switch>
	</target>

	<target name="-build-generic">
		<if>
			<!-- If there is an existing build script at the target location, use it! -->
			<available file="${dir}/build.xml" />
			<then>
				<!-- Foward the ant call including parameters -->
				<ant dir="${dir}" target="${target}" inheritrefs="true" />
			</then>
			<!-- Otherwise assume we are responsible for building -->
			<else>
				<if>
					<equals arg1="type" arg2="plugin"/>
					<then>
						<antcall target="-build-plugin" inheritrefs="true">
							<param name="dir" value="${dir}"/>
						</antcall>
					</then>
					<else>
						<antcall target="-build-plugin" inheritrefs="true">
							<param name="dir" value="${dir}"/>
							<param name="id" value="${id}"/>
							<param name="dest.dir" value="${dest.dir}"/>
						</antcall>
					</else>
				</if>
			</else>
		</if>


	</target>
	
	<target name="-get-plugins" unless="plugins">
		<echo>Run build for IMS only: ${build.ims}</echo>
		<if>
			<isset property="build.ims" />
			<then>
				<jpf-sort
					basedir="${plugins.home}"
					verbose="true"
					includes="*/plugin.xml,*/plugin-fragment.xml"
					pathid="plugins"
					pathmode="DIR" />
			</then>
			<else>
				<jpf-sort
					basedir="${plugins.home}"
					verbose="true"
					includes="*/plugin.xml,*/plugin-fragment.xml"
					blacklist="${basedir}/plugin-blacklist.txt"
					pathid="plugins"
					pathmode="DIR" />
			</else>
		</if>
	</target>

	<target name="-build-plugins" depends="-get-plugins">
		<mkdir dir="${build.home}/plugins" />
		
		
		<foreach param="dir" target="-build-plugin">
			<path refid="plugins" />
			
			<param name="dir" value="${dir}"/>
			<param name="target" value="${target}"/>
		</foreach>
		
		<!--
		<ant dir="plugins/de.ims.icarus.plugins.core" target="${target}" />
		<ant dir="plugins/de.ims.icarus.plugins.language_tools" target="${target}" />
		<ant dir="plugins/de.ims.icarus.plugins.jgraph" target="${target}" />
		<ant dir="plugins/de.ims.icarus.plugins.search_tools" target="${target}" />
		<ant dir="plugins/de.ims.icarus.plugins.dependency" target="${target}" />
		<ant dir="plugins/de.ims.icarus.plugins.matetools" target="${target}" />
		<ant dir="plugins/de.ims.icarus.plugins.tcf" target="${target}" />
		<ant dir="plugins/de.ims.icarus.plugins.weblicht" target="${target}" />

		<if>
			<isset property="build.ims" />
			<then>
				<ant dir="plugins/de.ims.icarus.plugins.coref" target="${target}" />
				<ant dir="plugins/de.ims.icarus.plugins.errormining" target="${target}" />
			</then>
		</if>
		-->
	</target>

	<target name="build" 
			depends="clean,-init,-version-properties" 
		description="Builds entire project">

		<ant dir="launcher/de.ims.icarus" target="build" inheritrefs="true" />
		<ant dir="core/de.ims.icarus" target="build" inheritrefs="true" />

		<antcall target="-build-plugins" inheritrefs="true">
			<param name="target" value="build" />
		</antcall>

		<if>
			<isset property="build.ims" />
			<then>
				<mkdir dir="${build.home}/data"/>
				<copy todir="${build.home}/data">
					<fileset dir="${basedir}/data">
						<include name="weblicht.xml"/>
						<include name="webchain.xml"/>
						<include name="ngramquery.xml"/>
						<include name="ngramquery_one.xml"/>
					</fileset>
				</copy>
			</then>
		</if>
	</target>

	<target name="build-ims" description="Builds entire project (for IMS internal staff members)">

		<property name="build.ims" value="true" />
		<antcall target="build" />
	</target>

	<target name="dist"
	        depends="build"
	        description="Prepares distribution packages">

		<!-- Collect source files -->
		<mkdir dir="${source.home}" />
		<delete includeemptydirs="true">
			<fileset dir="${source.home}">
				<include name="**/*" />
			</fileset>
		</delete>
		<ant dir="launcher/de.ims.icarus" target="source" />
		<ant dir="core/de.ims.icarus" target="source" />

		<antcall target="-build-plugins" inheritrefs="true">
			<param name="target" value="source" />
		</antcall>
		<copy todir="${source.home}" file="${license.file}" />

		<!-- Jar the sources and move to build folder -->
		<mkdir dir="${build.home}/src"/>
		<jar destfile="${build.home}/src/${app.name}-src-${app.version}.jar">
			<fileset dir="${source.home}" includes="**/*" />
		</jar>

		<!-- Copy utility stuff to build folder -->
		<copy todir="${build.home}">
			<fileset dir="${basedir}/quickstart-guide">
				<include name="*.pdf"/>
			</fileset>
		</copy>
		<copy todir="${build.home}" file="${license.file}" />


		<!-- Collect documentation files -->
		<mkdir dir="${docs.home}" />
		<delete includeemptydirs="true">
			<fileset dir="${docs.home}">
				<include name="**/*" />
			</fileset>
		</delete>
		<antcall target="-docs" />

		<!-- Zip build folder and move to dist folder -->
		<copy todir="${build.home}/${app.name}-${app.version}">
			<fileset dir="${build.home}">
				<exclude name="${app.name}-${app.version}/*" />
				<include name="**/*"/>
			</fileset>
		</copy>
		<mkdir dir="${dist.home}" />
		<delete includeemptydirs="true">
			<fileset dir="${dist.home}">
				<include name="**/*" />
			</fileset>
		</delete>
		<zip destfile="${dist.home}/${app.name}-${app.version}.zip"
		     duplicate="fail"
		     update="false">
			<fileset dir="${build.home}">
				<include name="${app.name}-${app.version}/**/*" />
			</fileset>
		</zip>

		<!-- Cleanup build stuff -->
		<delete dir="${build.home}/${app.name}-${app.version}" />
		
		<echo>Operation succeeded. You find the zipped dustributable in the 'dist' folder</echo>
	</target>

	<target name="dist-ims" description="Prepares distribution packages (for IMS internal staff members)">

		<property name="build.ims" value="true" />
		<antcall target="dist" />
	</target>
</project>
